// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	snp "github.com/andrii-minchekov/lets-go/domain/snippet"
	mock "github.com/stretchr/testify/mock"
)

// SnippetUseCase is an autogenerated mock type for the SnippetUseCase type
type SnippetUseCase struct {
	mock.Mock
}

// CreateSnippet provides a mock function with given fields: snippet
func (_m *SnippetUseCase) CreateSnippet(snippet snp.Snippet) (int64, error) {
	ret := _m.Called(snippet)

	var r0 int64
	if rf, ok := ret.Get(0).(func(snp.Snippet) int64); ok {
		r0 = rf(snippet)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(snp.Snippet) error); ok {
		r1 = rf(snippet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnippet provides a mock function with given fields: id
func (_m *SnippetUseCase) GetSnippet(id int64) (*snp.Snippet, error) {
	ret := _m.Called(id)

	var r0 *snp.Snippet
	if rf, ok := ret.Get(0).(func(int64) *snp.Snippet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snp.Snippet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestSnippets provides a mock function with given fields:
func (_m *SnippetUseCase) LatestSnippets() (snp.Snippets, error) {
	ret := _m.Called()

	var r0 snp.Snippets
	if rf, ok := ret.Get(0).(func() snp.Snippets); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(snp.Snippets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
