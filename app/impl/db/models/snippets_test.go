// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSnippets(t *testing.T) {
	t.Parallel()

	query := Snippets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSnippetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSnippetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Snippets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSnippetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SnippetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSnippetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SnippetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Snippet exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SnippetExists to return true, but got false.")
	}
}

func testSnippetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	snippetFound, err := FindSnippet(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if snippetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSnippetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Snippets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSnippetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Snippets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSnippetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snippetOne := &Snippet{}
	snippetTwo := &Snippet{}
	if err = randomize.Struct(seed, snippetOne, snippetDBTypes, false, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}
	if err = randomize.Struct(seed, snippetTwo, snippetDBTypes, false, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = snippetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = snippetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Snippets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSnippetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	snippetOne := &Snippet{}
	snippetTwo := &Snippet{}
	if err = randomize.Struct(seed, snippetOne, snippetDBTypes, false, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}
	if err = randomize.Struct(seed, snippetTwo, snippetDBTypes, false, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = snippetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = snippetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func snippetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func snippetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Snippet) error {
	*o = Snippet{}
	return nil
}

func testSnippetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Snippet{}
	o := &Snippet{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, snippetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Snippet object: %s", err)
	}

	AddSnippetHook(boil.BeforeInsertHook, snippetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	snippetBeforeInsertHooks = []SnippetHook{}

	AddSnippetHook(boil.AfterInsertHook, snippetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	snippetAfterInsertHooks = []SnippetHook{}

	AddSnippetHook(boil.AfterSelectHook, snippetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	snippetAfterSelectHooks = []SnippetHook{}

	AddSnippetHook(boil.BeforeUpdateHook, snippetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	snippetBeforeUpdateHooks = []SnippetHook{}

	AddSnippetHook(boil.AfterUpdateHook, snippetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	snippetAfterUpdateHooks = []SnippetHook{}

	AddSnippetHook(boil.BeforeDeleteHook, snippetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	snippetBeforeDeleteHooks = []SnippetHook{}

	AddSnippetHook(boil.AfterDeleteHook, snippetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	snippetAfterDeleteHooks = []SnippetHook{}

	AddSnippetHook(boil.BeforeUpsertHook, snippetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	snippetBeforeUpsertHooks = []SnippetHook{}

	AddSnippetHook(boil.AfterUpsertHook, snippetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	snippetAfterUpsertHooks = []SnippetHook{}
}

func testSnippetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSnippetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(snippetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSnippetToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Snippet
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SnippetSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Snippet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSnippetToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Snippet
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, snippetDBTypes, false, strmangle.SetComplement(snippetPrimaryKeyColumns, snippetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Snippets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testSnippetToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Snippet
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, snippetDBTypes, false, strmangle.SetComplement(snippetPrimaryKeyColumns, snippetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Snippets) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSnippetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSnippetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SnippetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSnippetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Snippets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	snippetDBTypes = map[string]string{`ID`: `bigint`, `Title`: `text`, `Content`: `text`, `Created`: `date`, `Expires`: `date`, `UserID`: `bigint`}
	_              = bytes.MinRead
)

func testSnippetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(snippetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(snippetAllColumns) == len(snippetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSnippetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(snippetAllColumns) == len(snippetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Snippet{}
	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, snippetDBTypes, true, snippetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(snippetAllColumns, snippetPrimaryKeyColumns) {
		fields = snippetAllColumns
	} else {
		fields = strmangle.SetComplement(
			snippetAllColumns,
			snippetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SnippetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSnippetsUpsert(t *testing.T) {
	t.Parallel()

	if len(snippetAllColumns) == len(snippetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Snippet{}
	if err = randomize.Struct(seed, &o, snippetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Snippet: %s", err)
	}

	count, err := Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, snippetDBTypes, false, snippetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Snippet struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Snippet: %s", err)
	}

	count, err = Snippets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
